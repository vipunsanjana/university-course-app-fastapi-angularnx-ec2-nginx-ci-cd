name: Fullstack CI/CD

on:
  push:
    branches: [main]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_ACCESS_TOKEN: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_ACCESS_TOKEN }}

      - name: Create backend .env file from GitHub Secrets
        run: |
          echo "GOOGLE_SHEET_URL=${{ secrets.GOOGLE_SHEET_URL }}" > backend/.env
          echo "SHEET_ID=${{ secrets.SHEET_ID }}" >> backend/.env
          echo "TYPE=${{ secrets.TYPE }}" >> backend/.env
          echo "PROJECT_ID=${{ secrets.PROJECT_ID }}" >> backend/.env
          echo "PRIVATE_KEY_ID=${{ secrets.PRIVATE_KEY_ID }}" >> backend/.env 
          echo "PRIVATE_KEY=${{ secrets.PRIVATE_KEY }}" >> backend/.env
          echo "CLIENT_EMAIL=${{ secrets.CLIENT_EMAIL }}" >> backend/.env
          echo "CLIENT_ID=${{ secrets.CLIENT_ID }}" >> backend/.env
          echo "AUTH_URI=${{ secrets.AUTH_URI }}" >> backend/.env
          echo "TOKEN_URI=${{ secrets.TOKEN_URI }}" >> backend/.env
          echo "AUTH_PROVIDER_X509_CERT_URL=${{ secrets.AUTH_PROVIDER_X509_CERT_URL }}" >> backend/.env
          echo "CLIENT_X509_CERT_URL=${{ secrets.CLIENT_X509_CERT_URL }}" >> backend/.env
          echo "UNIVERSE_DOMAIN=${{ secrets.UNIVERSE_DOMAIN }}" >> backend/.env

      - name: Build and push backend image
        run: |
          docker build -t $DOCKERHUB_USERNAME/backend:latest ./backend
          docker push $DOCKERHUB_USERNAME/backend:latest

      - name: Build and push org image
        run: |
          docker build -t $DOCKERHUB_USERNAME/org:latest ./org
          docker push $DOCKERHUB_USERNAME/org:latest

      - name: Build and push custom nginx image
        run: |
          docker build -t $DOCKERHUB_USERNAME/nginx:latest ./nginx
          docker push $DOCKERHUB_USERNAME/nginx:latest

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Docker prune old containers and images
        run: |
          docker container prune -f
          docker image prune -f

      - name: Free port 80 (stop containers and kill processes)
        run: |
          docker ps -q --filter publish=80 | xargs -r docker stop
          docker ps -aq --filter publish=80 | xargs -r docker rm
          sudo fuser -k 80/tcp || true
          sleep 2

      - name: Pull latest backend, org and nginx images
        run: |
          docker pull $DOCKERHUB_USERNAME/backend:latest
          docker pull $DOCKERHUB_USERNAME/org:latest
          docker pull $DOCKERHUB_USERNAME/nginx:latest

      - name: Run org container
        run: |
          docker stop org || true
          docker rm org || true
          docker run -d -p 4200:80 --name org $DOCKERHUB_USERNAME/org:latest

      - name: Run backend containers (2 replicas) with env file
        run: |
          # Create .env file on runner
          echo "GOOGLE_SHEET_URL=${{ secrets.GOOGLE_SHEET_URL }}" > backend/.env
          echo "SHEET_ID=${{ secrets.SHEET_ID }}" >> backend/.env
          echo "TYPE=${{ secrets.TYPE }}" >> backend/.env
          echo "PROJECT_ID=${{ secrets.PROJECT_ID }}" >> backend/.env
          echo "PRIVATE_KEY=${{ secrets.PRIVATE_KEY }}" >> backend/.env
          echo "CLIENT_EMAIL=${{ secrets.CLIENT_EMAIL }}" >> backend/.env
          echo "CLIENT_ID=${{ secrets.CLIENT_ID }}" >> backend/.env
          echo "AUTH_URI=${{ secrets.AUTH_URI }}" >> backend/.env
          echo "TOKEN_URI=${{ secrets.TOKEN_URI }}" >> backend/.env
          echo "AUTH_PROVIDER_X509_CERT_URL=${{ secrets.AUTH_PROVIDER_X509_CERT_URL }}" >> backend/.env
          echo "CLIENT_X509_CERT_URL=${{ secrets.CLIENT_X509_CERT_URL }}" >> backend/.env
          echo "UNIVERSE_DOMAIN=${{ secrets.UNIVERSE_DOMAIN }}" >> backend/.env

          docker stop backend1 || true
          docker rm backend1 || true
          docker run -d --env-file backend/.env -p 8001:8000 --name backend1 $DOCKERHUB_USERNAME/backend:latest

          docker stop backend2 || true
          docker rm backend2 || true
          docker run -d --env-file backend/.env -p 8002:8000 --name backend2 $DOCKERHUB_USERNAME/backend:latest

      - name: Run nginx container
        run: |
          docker stop nginx || true
          docker rm nginx || true
          docker run -d -p 80:80 --name nginx $DOCKERHUB_USERNAME/nginx:latest
